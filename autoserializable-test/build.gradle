import dev.bodewig.autoserializable.gradle.plugin.output.AutoSerializableClassesOutput
import dev.bodewig.autoserializable.gradle.plugin.output.AutoSerializableJarsOutput
import dev.bodewig.autoserializable.gradle.plugin.output.JavaClassesOutput

buildscript {
    dependencies {
        classpath gradleApi()
        classpath "dev.bodewig.autoserializable:autoserializable-gradle-plugin:$version"
    }
}

plugins {
    id 'java-library'
    id 'dev.bodewig.autoserializable.jars' version "$version"
    id 'dev.bodewig.autoserializable.classes' version "$version"
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
}

def testOutput = tasks.register('testOutput') {
    doFirst(() -> {
        JavaClassesOutput javaClassesOutput = project.getExtensions().getByType(JavaClassesOutput.class);
        Set<String> one = javaClassesOutput.getClassFiles().get();
        System.out.println("\nJavaClassesOutput: " + one);
        assert !one.isEmpty() : "JavaClassesOutput was empty";
        AutoSerializableJarsOutput autoSerializableJarsOutput = project.getExtensions().getByType(AutoSerializableJarsOutput.class);
        Set<String> two = autoSerializableJarsOutput.getJarFiles().get();
        System.out.println("\nAutoSerializableJarsOutput: " + two);
        assert !two.isEmpty() : "AutoSerializableJarsOutput was empty";
        AutoSerializableClassesOutput autoSerializableClassesOutput = project.getExtensions().getByType(AutoSerializableClassesOutput.class);
        Set<String> three = autoSerializableClassesOutput.getClassFiles().get();
        System.out.println("\nAutoSerializableClassesOutput: " + three);
        assert !three.isEmpty() : "AutoSerializableClassesOutput was empty";
    })
}

def test = tasks.named('test', Test) {
    useJUnitPlatform()
    testLogging {
        events 'failed', 'skipped', 'passed'
    }
}

def testAll = tasks.register('testAll') {
    dependsOn(test)
    dependsOn(testOutput)
}

tasks.named('build') {
    dependsOn(testAll)
}

dependencies {
    autoSerializable 'com.badlogicgames.gdx:gdx:1.12.1'
    testImplementation 'io.github.classgraph:classgraph:4.8.174'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.11.4'
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
